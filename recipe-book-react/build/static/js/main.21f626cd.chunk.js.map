{"version":3,"sources":["components/Textbox/index.js","components/Button/index.js","components/Text/index.js","api/User.js","pages/Login.js","pages/Recipes.js","components/RecipeList/RecipeItem.js","components/RecipeList/index.js","components/Checkbox/index.js","components/IngredientList/IngredientItem.js","api/Ingredient.js","components/IngredientList/index.js","api/Recipe.js","pages/Recipe.js","pages/NotFound.js","App.js","index.js"],"names":["Textbox","props","name","type","pass","value","onChange","e","setValue","target","Button","onClick","setAction","Text","style","whiteSpace","getUserById","userId","a","fetch","then","data","json","getUserAPI","user","reponse","addUserAPI","method","headers","body","JSON","stringify","Login","useState","loginName","setLoginName","password","setPassword","errMsg","setErrMsg","adding","setAdding","navigate","useNavigate","error","undefined","id","setLogin","className","Recipes","params","useParams","setUser","useEffect","Number","fetchData","auth","to","RecipeItem","recipe","editMode","editName","setEditName","editRecipe","markEditRecipe","deleteRecipe","RecipeList","itemList","length","map","o","onSelect","onSelectEdit","onDelete","onEdit","Checkbox","defaultChecked","checked","key","htmlFor","label","IngredientItem","ingredient","editIngredient","obtained","toggleIngredient","markEditIngredient","deleteIngredient","getIngredientsAPI","recipeId","addIngredientAPI","updateIngredientAPI","ingredientId","status","deleteIngredientAPI","IngredientList","currentIngredients","setIngredients","addIngredientName","setAddIngredientName","editIngredientName","setEditIngredientName","addIngredient","response","push","setEditIngredient","i","removeIngredient","filter","item","newIngredients","ingredients","recipeName","getRecipesAPI","addRecipeAPI","updateRecipeAPI","deleteRecipeAPI","Recipe","currentRecipes","setRecipes","setRecipeId","setRecipeName","addRecipeName","setAddRecipeName","editRecipeName","setEditRecipeName","setRecipe","newRecipes","recipes","NotFound","App","authurized","setAuth","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.21f626cd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Textbox(props) {\r\n    return (\r\n        <>\r\n            <label>{props.name}</label>\r\n            <input type={props.pass ? 'password' : 'text'} value={props.value} onChange={e => props.setValue(e.target.value)}/> \r\n        </>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function Button(props){\r\n  return (\r\n  \t<button onClick={ props.setAction }>{props.name}</button>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Text(props) {\r\n    return (\r\n        <>\r\n            <span style={{ whiteSpace: 'pre-wrap' }}> {props.value} </span>\r\n        </>\r\n    );\r\n}","\r\nexport async function getUserById(userId) {\r\n   return await fetch('http://localhost:36440/api/user/' + userId)\r\n     .then(data => data.json())\r\n}\r\n\r\nexport async function getUserAPI(user) {\r\n    var reponse = await fetch('http://localhost:36440/api/user/name/' + user);\r\n    var data = await reponse.json();\r\n    return data;\r\n}\r\n  \r\nexport async function addUserAPI(user) {\r\n   return await fetch('http://localhost:36440/api/user/', {\r\n     method: 'POST',\r\n     headers: {\r\n       'Content-Type': 'application/json'\r\n     },\r\n     body: JSON.stringify(user)\r\n   })\r\n     .then(data => data.json())\r\n}","import React, { useState } from 'react';\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport Textbox from '../components/Textbox';\r\nimport Button from '../components/Button';\r\nimport Text from '../components/Text';\r\n\r\nimport { getUserAPI, addUserAPI} from '../api/User';\r\n\r\nexport default function Login(props) {\r\n    const [loginName, setLoginName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [errMsg, setErrMsg] = useState('');\r\n    const [adding, setAdding] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    async function tryLogin() {\r\n        var error = '';\r\n\r\n        if (loginName === '') {\r\n            error = 'Please enter a Login. \\r\\n';\r\n        }\r\n        \r\n        if (password === '') {\r\n            error += 'Please enter a Password. \\r\\n';\r\n        }\r\n        setErrMsg(error);\r\n\r\n        if (error === '')\r\n        {\r\n            var user = await getUserAPI(loginName);\r\n            if (user.id === undefined || user.password !== password) \r\n            {\r\n                setErrMsg('No matching Login.');\r\n            }\r\n            else {\r\n                props.setLogin(true);\r\n                navigate('/recipes/' + user.id);\r\n            }\r\n        }\r\n    };\r\n\r\n    async function addUser() {\r\n        var error = '';\r\n        if (loginName === '') {\r\n            error = 'Please enter a Login. \\r\\n';\r\n        }\r\n        \r\n        if (password === '') {\r\n            error += 'Please enter a Password. \\r\\n';\r\n        }\r\n        setErrMsg(error);\r\n\r\n        if (error === '')\r\n        {\r\n            var user = await addUserAPI( {name:loginName, password: password});\r\n            if (user.id === undefined) \r\n            {\r\n                setErrMsg('User was not Added.');\r\n            }\r\n            else {\r\n                props.setLogin(true);\r\n                navigate('/recipes/' + user.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    function toggleAdding() {\r\n        setAdding(!adding);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <h1 className=\"App-header\">\r\n                    Login Page\r\n                </h1>\r\n\r\n                <div className=\"center-div\">\r\n                    <Textbox name='Login:' value={loginName} setValue={setLoginName} />\r\n                    <br />\r\n                    <Textbox name='Password:' value={password} setValue={setPassword} pass={true} />\r\n                    <br /> \r\n                    {adding ? <Button  name='Add' setAction={ addUser } />  :\r\n                            <Button  name='Submit' setAction={ tryLogin } /> }\r\n                            \r\n                    <div className=\"red\">\r\n                        <Text value={errMsg} />\r\n                    </div>\r\n\r\n                    <div className=\"clickText\" onClick={ () => toggleAdding() }>\r\n                        { adding ?  <span>Cancel</span> : <span>Add a new User</span>}\r\n                    </div>\r\n                    \r\n                </div>\r\n                    \r\n            </div>\r\n        </>\r\n    );\r\n\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Navigate, Outlet, useParams, useNavigate } from \"react-router-dom\";\r\n\r\nimport { getUserById } from '../api/User';\r\n\r\nconst Recipes = (props) => {\r\n    let params = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    const [user, setUser] = useState({});\r\n\r\n    useEffect(() => { \r\n        async function fetchData() {\r\n            setUser(await getUserById(Number(params.userId)));\r\n        }\r\n        fetchData();\r\n    }, [params.userId])\r\n\r\n    if (!props.auth) {\r\n        return <Navigate to='/' />;\r\n    }\r\n\r\n    function Logout() {\r\n        navigate('/');\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"logout clickText\" onClick={() => Logout() }>\r\n                <span>Log out</span>\r\n            </div>\r\n\r\n            <h1 className=\"App-header\">\r\n                Recipes for {user.name}\r\n            </h1>\r\n\r\n            <div className=\"center-div\">\r\n                <Outlet />\r\n            </div>\r\n        </>);\r\n  };\r\n  \r\n  export default Recipes;","import Button from '../Button';\r\nimport Textbox from '../Textbox';\r\n\r\nexport default function RecipeItem(props) {\r\n    if (!props.recipe.editMode)\r\n    {\r\n        return (\r\n                <div key={'recipe-key-' + props.recipe.id}>\r\n                    <span> {props.recipe.name}</span>\r\n                    <div className='btn-item'>\r\n                        <Button name='Edit' setAction={ () => props.markEditRecipe(props.recipe.id) } />\r\n                        <Button name='Delete' setAction={ () => props.deleteRecipe(props.recipe.id)  } />\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n    else{\r\n        return (\r\n            <div key='recipe-key-add'>\r\n                <Textbox name='' value={ props.editName } setValue={ props.setEditName } />\r\n                <div className='btn-item'>\r\n                    <Button name='Save' setAction={ () => props.editRecipe(props.recipe.id) } />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport RecipeItem from './RecipeItem';\r\n\r\nexport default function RecipeList(props) {\r\n    if (props.itemList.length === 0)\r\n    {\r\n        return (\r\n            <>\r\n                <div>\r\n                    <span> No Recipes. </span>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <>\r\n                <div>\r\n                    { props.itemList.map(o =>\r\n                        <div className=\"recipe-item\">\r\n                            <div onClick={ () => props.onSelect( o.id, o.name ) }>\r\n                                <RecipeItem recipe={ o } \r\n                                    markEditRecipe={ props.onSelectEdit } \r\n                                    deleteRecipe={ props.onDelete } \r\n                                    setEditName={ props.setEditName }\r\n                                    editName={ props.editName }\r\n                                    editRecipe={ props.onEdit } />\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function Checkbox(props) {\r\n    return (\r\n        <>\r\n            <input key={props.key} type='checkbox' name={props.name} defaultChecked={props.checked} onChange={ () => props.onChange(props.id) }/>\r\n            <label htmlFor={props.name}> {props.label} </label>\r\n        </>\r\n    );\r\n}","import Button from '../Button';\r\nimport Textbox from '../Textbox';\r\nimport Checkbox from '../Checkbox';\r\n\r\nexport default function IngredientItem(props) {\r\n    if (!props.ingredient.editMode)\r\n    {\r\n        return (\r\n                <>\r\n                    <Checkbox \r\n                        name={props.ingredient.name} \r\n                        checked={props.ingredient.obtained} \r\n                        label={props.ingredient.name} \r\n                        onChange={props.toggleIngredient}\r\n                        id={props.ingredient.id}\r\n                    />\r\n                    <div className='btn-item'>\r\n                        <Button name='Edit' setAction={ () => props.markEditIngredient(props.ingredient.id) } />\r\n                        <Button name='Delete' setAction={ () => props.deleteIngredient(props.ingredient.id)  } />\r\n                    </div>\r\n                </>\r\n            );\r\n    }\r\n    else{\r\n        return (\r\n            <>\r\n                <Textbox name='' value={ props.editName } setValue={ props.setEditName } />\r\n                <div className='btn-item'>\r\n                    <Button name='Save' setAction={ () => props.editIngredient(props.ingredient.id, props.ingredient.obtained) } />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n}","export function getIngredientsAPI(recipeId) {\r\n    return fetch('http://localhost:36440/api/ingredient/recipe/' + recipeId)\r\n      .then(data => data.json())\r\n}\r\n\r\nexport function addIngredientAPI(ingredient) {\r\n   return fetch('http://localhost:36440/api/ingredient/', {\r\n     method: 'POST',\r\n     headers: {\r\n       'Content-Type': 'application/json'\r\n     },\r\n     body: JSON.stringify(ingredient)\r\n   })\r\n     .then(data => data.json())\r\n}\r\n\r\nexport function updateIngredientAPI(ingredientId, ingredient) {\r\n    return fetch('http://localhost:36440/api/ingredient/' + ingredientId, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(ingredient)\r\n    })\r\n      .then(data => data.status)\r\n }\r\n\r\n export function deleteIngredientAPI(ingredientId) {\r\n    return fetch('http://localhost:36440/api/ingredient/' + ingredientId, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(data => data.status)\r\n }","import React, { useState, useEffect } from 'react';\r\nimport IngredientItem from './IngredientItem';\r\n\r\nimport Button from '../Button';\r\nimport Textbox from '../Textbox';\r\n\r\nimport { getIngredientsAPI, addIngredientAPI, updateIngredientAPI, deleteIngredientAPI} from '../../api/Ingredient';\r\n\r\nexport default function IngredientList(props) {\r\n\r\n    const [currentIngredients, setIngredients] = useState([]);\r\n    const [addIngredientName, setAddIngredientName] = useState('');\r\n    const [editIngredientName, setEditIngredientName] = useState('');\r\n\r\n    useEffect( () => {\r\n        async function fetchData() {\r\n            var newIngredients = [];\r\n            var ingredients = await getIngredientsAPI(props.recipeId);\r\n            for (var i = 0; i < ingredients.length; i++)\r\n            {        \r\n                newIngredients.push(\r\n                    {\r\n                        id : ingredients[i].id,\r\n                        name : ingredients[i].name,\r\n                        recipeId : ingredients[i].recipeId,\r\n                        obtained: ingredients[i].obtained,\r\n                        editMode : false\r\n                    }\r\n                );\r\n            }\r\n            setIngredients( newIngredients );\r\n        }\r\n        fetchData();\r\n    }, [props.recipeId])\r\n\r\n    async function addIngredient() {\r\n        if (addIngredientName != null)\r\n        {\r\n            var response = await addIngredientAPI( { name: addIngredientName, recipeId: Number(props.recipeId), obtained: false } );\r\n            currentIngredients.push(\r\n                {\r\n                    id : response.id,\r\n                    name : response.name,\r\n                    recipeId : response.recipeId,\r\n                    obtained: response.obtained,\r\n                    editMode : false\r\n                } );\r\n            setAddIngredientName('');\r\n            setIngredients(currentIngredients); \r\n        }      \r\n    }\r\n\r\n    function setEditIngredient( id ) {\r\n        for (var i = 0; i < currentIngredients.length; i++)\r\n        {  \r\n            if (currentIngredients[i].id === id)\r\n            {\r\n                currentIngredients[i].editMode = true;\r\n                setEditIngredientName(currentIngredients[i].name)\r\n            }\r\n            else {\r\n                currentIngredients[i].editMode = false;\r\n            }\r\n        }\r\n        setIngredients( currentIngredients );\r\n    }\r\n\r\n    async function editIngredient( id, obtained ) {\r\n        if (id != null)\r\n        {\r\n            await updateIngredientAPI( id, { id: id, name: editIngredientName, recipeId: Number(props.recipeId), obtained: obtained } );\r\n            for (var i = 0; i < currentIngredients.length; i++)\r\n            {  \r\n                if (currentIngredients[i].id === id)\r\n                {\r\n                    currentIngredients[i].name = editIngredientName;\r\n                }\r\n                currentIngredients[i].editMode = false;\r\n            }\r\n        setEditIngredientName('');\r\n        setIngredients( currentIngredients );\r\n        }\r\n    }\r\n\r\n    async function removeIngredient( id ) {\r\n        if (id != null)\r\n        {\r\n            await deleteIngredientAPI( id );\r\n            setIngredients(currentIngredients.filter(item => item.id !== id));\r\n        }\r\n    }\r\n\r\n    async function toggleIngredient(id) {\r\n        for (var i = 0; i < currentIngredients.length; i++)\r\n            {  \r\n                if (currentIngredients[i].id === id)\r\n                {\r\n                    currentIngredients[i].obtained = !currentIngredients[i].obtained;\r\n                    await updateIngredientAPI( id, {   \r\n                                id: currentIngredients[i].id, \r\n                                name: currentIngredients[i].name, \r\n                                recipeId: currentIngredients[i].recipeId, \r\n                                obtained: currentIngredients[i].obtained \r\n                            } \r\n                        );\r\n                }\r\n            }\r\n        setIngredients(currentIngredients);\r\n    }\r\n\r\n    if (currentIngredients.length === 0)\r\n    {\r\n        return (\r\n            <>\r\n                <div className=\"ingredients-list\">\r\n                    <div className=\"ingredient-item\">\r\n                        {props.recipeName}\r\n                    </div>\r\n                    <span> No Ingredients. </span>\r\n\r\n                    <br />\r\n                    <div className=\"add-item\">\r\n                        <Textbox name='Name:' value={ addIngredientName } setValue={ setAddIngredientName } />\r\n                        <Button name='Add' setAction={ addIngredient } />\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <>\r\n                <div className=\"ingredients-list\">\r\n                        <div className=\"ingredient-item\">\r\n                            {props.recipeName}\r\n                        </div>\r\n                        { currentIngredients.map(o =>\r\n                            <div className=\"ingredient-item\">\r\n                                <IngredientItem ingredient={ o } \r\n                                        markEditIngredient={ setEditIngredient } \r\n                                        deleteIngredient={ removeIngredient } \r\n                                        setEditName={ setEditIngredientName }\r\n                                        editName={ editIngredientName }\r\n                                        editIngredient={ editIngredient }\r\n                                        toggleIngredient = { toggleIngredient }\r\n                                        setIngredients={ setIngredients } />\r\n                            </div> \r\n                        )}\r\n\r\n                    <br />\r\n                    <div className=\"add-item\">\r\n                        <Textbox name='Name:' value={ addIngredientName } setValue={ setAddIngredientName } />\r\n                        <Button name='Add' setAction={ addIngredient } />\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","export function getRecipesAPI(userId) {\r\n    return fetch('http://localhost:36440/api/recipe/user/' + userId)\r\n      .then(data => data.json())\r\n}\r\n\r\nexport function addRecipeAPI(recipe) {\r\n   return fetch('http://localhost:36440/api/recipe/', {\r\n     method: 'POST',\r\n     headers: {\r\n       'Content-Type': 'application/json'\r\n     },\r\n     body: JSON.stringify(recipe)\r\n   })\r\n     .then(data => data.json())\r\n}\r\n\r\nexport function updateRecipeAPI(recipeId, recipe) {\r\n    return fetch('http://localhost:36440/api/recipe/' + recipeId, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(recipe)\r\n    })\r\n      .then(data => data.status)\r\n }\r\n\r\n export function deleteRecipeAPI(recipeId) {\r\n    return fetch('http://localhost:36440/api/recipe/' + recipeId, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(data => data.status)\r\n }","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport RecipeList from '../components/RecipeList';\r\nimport IngredientList from '../components/IngredientList';\r\n\r\nimport Button from '../components/Button';\r\nimport Textbox from '../components/Textbox';\r\n\r\nimport { getRecipesAPI, addRecipeAPI, updateRecipeAPI, deleteRecipeAPI} from '../api/Recipe';\r\n\r\nconst Recipe = (props) => {\r\n    let params = useParams();\r\n   \r\n    const [currentRecipes, setRecipes] = useState([]);\r\n    const [recipeId, setRecipeId] = useState([]);\r\n    const [recipeName, setRecipeName] = useState('');\r\n    const [addRecipeName, setAddRecipeName] = useState([]);\r\n    const [editRecipeName, setEditRecipeName] = useState('');\r\n\r\n    useEffect(() => { \r\n        async function fetchData() {\r\n            var newRecipes = [];\r\n                var recipes = await getRecipesAPI(params.userId);\r\n                for (var i = 0; i < recipes.length; i++)\r\n                {        \r\n                    newRecipes.push(\r\n                        {\r\n                            id : recipes[i].id,\r\n                            name : recipes[i].name,\r\n                            userId : recipes[i].userId,\r\n                            editMode : false\r\n                        }\r\n                    );\r\n                }\r\n                setRecipes( newRecipes );\r\n        }\r\n        fetchData();\r\n    }, [params.userId])\r\n\r\n    function setRecipe( id, name ) {\r\n        setRecipeId( id );\r\n        setRecipeName( name )\r\n    }\r\n\r\n    async function addRecipe() {\r\n        if (addRecipeName != null)\r\n        {\r\n            var response = await addRecipeAPI( { name: addRecipeName, userId: Number(params.userId) } );\r\n            currentRecipes.push(\r\n                {\r\n                    id : response.id,\r\n                    name : response.name,\r\n                    userId : response.userId,\r\n                    editMode : false\r\n                } );\r\n            setAddRecipeName('');\r\n            setRecipe(response.id);\r\n            setRecipes(currentRecipes);\r\n        }      \r\n    }\r\n\r\n    function setEditRecipe( id ) {\r\n        for (var i = 0; i < currentRecipes.length; i++)\r\n        {  \r\n            if (currentRecipes[i].id === id)\r\n            {\r\n                currentRecipes[i].editMode = true;\r\n                setEditRecipeName(currentRecipes[i].name)\r\n            }\r\n            else {\r\n                currentRecipes[i].editMode = false;\r\n            }\r\n        }\r\n        setRecipes( currentRecipes );\r\n    }\r\n\r\n    async function editRecipe( id ) {\r\n        if (id != null)\r\n        {\r\n            await updateRecipeAPI( id, { id: id, name: editRecipeName, userId: Number(params.userId) } );\r\n            for (var i = 0; i < currentRecipes.length; i++)\r\n            {  \r\n                if (currentRecipes[i].id === id)\r\n                {\r\n                    currentRecipes[i].name = editRecipeName;\r\n                }\r\n                currentRecipes[i].editMode = false;\r\n            }\r\n        setEditRecipeName('');\r\n        setRecipes( currentRecipes );\r\n        }\r\n    }\r\n\r\n    async function removeRecipe( id ) {\r\n        if (id != null)\r\n        {\r\n            await deleteRecipeAPI( id );\r\n            setRecipes(currentRecipes.filter(item => item.id !== id));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <> \r\n            <div className=\"recipes-list\">\r\n                <RecipeList itemList={ currentRecipes } \r\n                    onSelect={ setRecipe } \r\n                    onSelectEdit={ setEditRecipe }\r\n                    setEditName={ setEditRecipeName }\r\n                    editName={ editRecipeName }\r\n                    onEdit={ editRecipe } \r\n                    onDelete={ removeRecipe } />\r\n                <div className=\"add-item\">\r\n                    <Textbox name='Name:' value={ addRecipeName } setValue={ setAddRecipeName } />\r\n                    <Button name='Add' setAction={ addRecipe } />\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <IngredientList recipeId={ recipeId } recipeName = { recipeName } />         \r\n        </>);\r\n  };\r\n  \r\n  export default Recipe;","const NotFound = () => {\r\n    return (\r\n    <> \r\n      <h1 className=\"App-header\">\r\n        NotFound\r\n      </h1>\r\n    </>);\r\n  };\r\n  \r\n  export default NotFound;","import './App.css';\nimport React, { useState } from 'react';\nimport { Routes, Route } from \"react-router-dom\";\nimport Login from \"./pages/Login\";\nimport Recipes from \"./pages/Recipes\";\nimport Recipe from \"./pages/Recipe\";\nimport NotFound from \"./pages/NotFound\";\n\nexport default function App() {\n  const [authurized, setAuth] = useState(false);\n  \n  return (\n    <div className=\"App\">\n      <Routes>\n        <Route path='/' element={ <Login setLogin={setAuth} /> } />\n        <Route path='/recipes/:userId' element={ <Recipes auth={authurized} /> } >\n          <Route path='/recipes/:userId' element={ <Recipe /> } />\n        </Route> \n        <Route path='/*' element={ <NotFound/> } />\n      </Routes>\n    </div>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}